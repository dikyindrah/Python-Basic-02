Catatan:

time

time adalah modul yang bisa kita gunakan untuk menangani 
tugas-tugas yang berhubungan dengan waktu. Berbeda dengan
modul datetime yang digunakan untuk memanipulasi tanggal
dan waktu, modul time lebih cenderung digunakan untuk 
Akses waktu dan konversi. Salah satu contoh penggunaan
paling umum dari modul time adalah menjeda waktu eksekusi
suatu pernyataan, untuk melakukanya kita bisa menggunakan
fungsi sleep() dari modul ini.

Contoh:

import time as tm

print('\nProgram mulai...')

for i in range(5):
    print(i+1)
    tm.sleep(2.0)

print('Program berakhir...')

Output:

Program mulai...
1
2
3
4
5
Program berakhir...

Pada kode program diatas, kita mengatur agar pernyataan 
didalam perulangan di eksekusi dengan jeda waktu 2 detik.


Tidak hanya itu modul time memiliki sejumlah method atau 
fungsi yang bisa kita gunakan untuk berbagai kerperluan
yang berhubungan dengan akses waktu dan konversi.

time()

time() bisa kita gunakan untuk mengetahui sudah berapa 
banyak detik yang berlalu sejak waktu pada komputer 
pertama kali ditentukan ('1 Januari 1970') hingga saat 
ini.

Contoh:

import time as tm

# time()
detik = tm.time()
print(detik)

Output:

1624069207.1312265


ctime()

ctime() bisa kita gunakan untuk mengetahui tanggal dan waktu 
dari detik yang telah ditentukan. Argumen dari fungsi ini
adalah detik yang kita berikan.

Contoh:

# ctime
# Mengetahui tanggal dan waktu saat pertama kali 
# ditentukan
tgl_wkt_pertama = tm.ctime(0.0)
print(tgl_wkt_pertama)

# Mengetahui tanggal dan waktu saat ini
detik = tm.time()
tgl_wkt_saat_ini = tm.ctime(detik)
print(tgl_wkt_saat_ini)


Output:

Thu Jan  1 07:00:00 1970
Sat Jun 19 09:50:58 2021


sleep()

sleep() bisa kita gunakan untuk menjeda waktu
eksekusi suatu pernyataan. Argumen dari fungsi
ini adalah berapa lama waktu jeda yang ingin 
kita berikan.

Contoh:

print('Program dimulai...')
tm.sleep(2.0)
print('Program selesai...')

Output:

Program dimulai...
Program selesai..


localtime()

localtime() bisa kita gunakan untuk mengetahui 
tanggal dan waktu lokal dari detik yang telah ditentukan. 
Argumen dari fungsi ini adalah detik yang kita berikan, 
jika tidak ada argumen yang diberikan maka nilai yang 
dikembalikan oleh fungsi time() digunakan.

Ini hampir mirip dengan fungsi ctime(), namun di fungsi
localtime() kita bisa mendapatkan tanggal dan waktu
secara terpisah.

Contoh:

# locltime
waktu_lokal = tm.localtime(1890232121)

# Struktur waktu dari kelas struct_tim()
print(waktu_lokal)

tgl = waktu_lokal.tm_mday
bln = waktu_lokal.tm_mon
thn = waktu_lokal.tm_year
jam = waktu_lokal.tm_hour
mnt = waktu_lokal.tm_min
dtk = waktu_lokal.tm_sec

print('{}-{}-{} {}:{}:{}'.format(tgl, bln, thn, jam, mnt, dtk))

Output:

time.struct_time(tm_year=2029, tm_mon=11, tm_mday=24, 
tm_hour=23, tm_min=28, tm_sec=41, tm_wday=5, tm_yday=328, 
tm_isdst=0)

24-11-2029 23:28:41


gmtime()

gmtime() bisa kita gunakan untuk mengetahui tanggal 
dan waktu UTC dari detik yang telah ditentukan. 
Argumen dari fungsi ini adalah detik yang kita berikan, 
jika tidak ada argumen yang diberikan maka nilai yang 
dikembalikan oleh fungsi time() digunakan.

Contoh:

# gmtime
waktu_utc = tm.gmtime(1545925769)

# Struktur waktu dari kelas struct_tim()
print(waktu_utc)

tgl = waktu_utc.tm_mday
bln = waktu_utc.tm_mon
thn = waktu_utc.tm_year
jam = waktu_utc.tm_hour
mnt = waktu_utc.tm_min
dtk = waktu_utc.tm_sec

print('{}-{}-{} {}:{}:{}'.format(tgl, bln, thn, jam, mnt, dtk))


Output:

time.struct_time(tm_year=2018, tm_mon=12, tm_mday=27, 
tm_hour=15, tm_min=49, tm_sec=29, tm_wday=3, tm_yday=361, 
tm_isdst=0)

27-12-2018 15:49:29


mktime()

mktime() bisa kita gunakan untuk mengetahui detik
pada tanggal dan waktu yang ditentukan. Argumen
dari fungsi ini adalah tanggal dan waktu yang kita 
berikan.

Contoh:

# mktime()
t = (1999, 11, 27, 0, 0, 0, 0, 0, 0)
waktu_mk = tm.mktime(t)
print(waktu_mk)

Output:

943635600.0


asctime()

asctime() bisa kita gunakan untuk mengubah struktur waktu
yang kita berikan kedalam bentuk string yang mewakili itu.

Contoh:

# asctime()
t = (1999, 11, 27, 0, 0, 0, 0, 0, 0)
waktu_asc = tm.asctime(t)
print(waktu_asc)

Output:

Mon Nov 27 00:00:00 1999


strftime()

strftime() bisa kita gunakan untuk memformaat waktu
dan tanggal pada modul time. Argumen yang digunakan 
pada fungsi ini adalah format waktu, tanggal dan 
informasi dari kelas struct_time.

format waktu dan tanggal yang bisa kita gunakan,
diantaranya:

[-] %Y - tahun [0001,..., 2018, 2019,..., 9999]
[-] %m - bulan dalam angka [01, 02, ..., 11, 12]
[-] %B - bulan dalam nama [Januari, Februari, ..., Desember]
[-] %d - hari  [01, 02, ..., 30, 31]
[-] %H - jam   [00, 01, ..., 22, 23
[-] %M - menit [00, 01, ..., 58, 59]
[-] %S - detik [00, 01, ..., 58, 61]

Contoh:

# strftime()
waktu = tm.localtime()
format_waktu = tm.strftime('%H:%M:%S', waktu)
print(format_waktu)

tanggal = tm.localtime()
format_tanggal = tm.strftime('%d-%m-%Y', tanggal)
print(format_tanggal)

Output:

19:54:11
19-06-2021


strptime()

strptime() bisa kita gunakan untuk mengubah waktu dalam
bentuk string ke bentuk objek time. yang perlu diperhatikan
adalah urutan penulisan dan format penulisan.

Contoh:

# srtptime
str_waktu = '27 November 1999 12:30:45'
obj_waktu = tm.strptime(str_waktu, '%d %B %Y %H:%M:%S')
print(obj_waktu)

waktu_asc = tm.asctime(obj_waktu)
print(waktu_asc)

Output:

time.struct_time(tm_year=1999, tm_mon=11, tm_mday=27, tm_hour=12, tm_min=30, tm_sec=45, tm_wday=5, tm_yday=331, tm_isdst=-1)
Sat Nov 27 12:30:45 1999


Referensi:

1.  https://www.programiz.com/python-programming/time
2.  https://www.programiz.com/python-programming/time/sleep