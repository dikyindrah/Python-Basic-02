Catatan:

RegEx Functions

Modul re pada python menawarkan sejumlah method atau 
fungsi yang bisa kita gunakan untuk mencari string. 


findall()

findall() mengembalikan string yang cocok dalam bentuk 
list. Jika string yang cocok dengan pola ditemukan maka 
akan mengembalikan objek match dalam bentuk list dan 
jika tidak ditemukan maka akan mengembalikan nilai None. 
Method findall() memiliki dua argumen yang harus kita 
berikan yaitu pola (pattern) dan string.

Contoh:

import re

# findall()
teks = '27 November 1999'
hasil = re.findall(r'\d+', teks)
print(hasil)


Output:

['27', '1999']


search()

search() mencari lokasi saat pola regex cocok dengan 
string. Jika ditemukan kecocokan antara pola dengan 
string, maka string yang cocok dan lokasi yang merujuk 
pada indeks awal dan akhir string yang cocok dari 
string asli akan dikembalikan sebagai objek match dan 
jika tidak ditemukan maka akan mengembalikan nilai None.
Method search() memiliki dua argumen yang harus kita 
berikan yaitu pola (pattern) dan string.


Contoh:

# search()
teks = 'javascript, php, pyhton, 12345, go, r'
hasil = re.search(r'\d\d\d\d\d', teks)
print(len(teks))
print(hasil)


Output:

37
<re.Match object; span=(25, 30), match='12345'>


Kita bisa menggunakan sejumlah method untuk mengolah 
objek match yang di hasilkan dari method search(). 
Beberapa yang umum digunakan diantaranya.

group()

group() mengembalikan bagian dari string yang cocok
dengan pola. 

Contoh:

# group()
print(hasil.group())


Output:

12345


start(), end(), dan span()

start() mengembalikan indeks awal dari objek match
pada string dan end() mengembalikan indeks akhir dari 
objek match pada string.

Contoh:

# start(), end(), dan span()
print(hasil.start())
print(hasil.end())


Output:

25
30


span() mengembalikan tuple yang berisi indeks awal dan 
akhir dari objek match pada string.

Contoh:

print(hasil.span())


Output:

(25, 30)


re dan string

Atribut re mengembalikan pola yang digunakan pada objek match
dari method search() dan atribut string mengembalikan string 
yang diteruskan pada method search().

Contoh:

# re dan string
print(hasil.re)
print(hasil.string)

Output:

re.compile('\\d\\d\\d\\d\\d')
javascript, php, pyhton, 12345, go, r


split()

split() membagi objek match dan mengembalikannya dalam 
bentuk list. Jika string yang cocok dengan pola ditemukan 
maka akan mengembalikan objek match dalam bentuk list dan 
jika tidak ditemukan maka akan mengembalikan list berisi 
string asli. Method split() memiliki dua argumen yang harus 
kita berikan yaitu pola (pattern) dan string.

Contoh:

# split()
teks = 'hari ini hujan lebat'

hasil = re.split(r'\s', teks)
print(hasil)


Output:

['hari', 'ini', 'hujan', 'lebat']


Kita juga bisa menambahkan maxsplit untuk menentukan
jumlah maksimum objek match yang bisa di bagi atau 
dipecah menjadi beberapa bagian. 

Contoh:


# Maxsplit = 1
mx_hasil = re.split(r'\s', teks, 1)
print(mx_hasil)

# Maxsplit = 2
mx_hasil = re.split(r'\s', teks, 2)
print(mx_hasil)


Output:

['hari', 'ini hujan lebat']
['hari', 'ini', 'hujan lebat']


Karena indeks pada list dimulai dari 0, maka jika kita
mendefinisikan maxsplit sama dengan 1 maka objek match
akan dipecah menajdi dua bagian, karena indeksnya 0, 1.
Nilai default dari maxsplit adalah 0, yang artinya objek
match dipecah menjadi beberapa bagian berdasarkan seluruh 
kemungkinan.


sub()

sub() mengganti objek match dengan string baru kemudian 
mengembalikannya sebagai string. Jika string yang cocok 
dengan pola ditemukan maka akan mengganti objek match 
dengan string baru dan mengembalikannya dalam bentuk 
string dan jika tidak ditemukan maka akan mengembalikan 
string asli. Method sub() memiliki tiga argumen yang 
harus kita berikan yaitu pola (pattern), string baru 
(replace), dan string.

Contoh:

# sub()
teks  = 'saya sedang belajar java'
hasil = re.sub('java', 'python', teks)
print(hasil)

Output:

saya sedang belajar python


Pada method sub() kita juga bisa menentukan jumlah 
objek match yang ingin kita ubah dengan menambahkan
argumen pada parameter count.

Contoh:

teks  = 'java, java, java, java, java, java, java'
hasil = re.sub('java', 'python', teks, 3)
print(hasil)

Output:

python, python, python, java, java, java, java


subn()

subn() mirip dengan method sub(), hanya saja subn()
mengembalikan tuple yang berisi string asli dan
jumlah objek match.

Contoh:

# subn()
teks  = 'java, go, java, go, java, go, java'
hasil = re.subn('java', 'python', teks)
print(hasil)


Output:

('python, go, python, go, python, go, python', 4)


Referensi:

1.  https://www.pythonindo.com/regular-expression/
2.  https://www.programiz.com/python-programming/regex
3.  https://www.w3schools.com/python/python_regex.asp